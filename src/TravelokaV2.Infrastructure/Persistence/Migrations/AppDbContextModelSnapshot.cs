// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelokaV2.Infrastructure.Persistence;

#nullable disable

namespace TravelokaV2.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.AccomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccomTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Hotel"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Resort"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("AccomId", "FacilityId")
                        .IsUnique();

                    b.ToTable("Accom_Facilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1a1a1a1-a1a1-a1a1-a1a1-a1a1a1a1a1a1"),
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("b2b2b2b2-b2b2-b2b2-b2b2-b2b2b2b2b2b2"),
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("c3c3c3c3-c3c3-c3c3-c3c3-c3c3c3c3c3c3"),
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("d4d4d4d4-d4d4-d4d4-d4d4-d4d4d4d4d4d4"),
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("AccomId", "ImageId")
                        .IsUnique();

                    b.ToTable("Accom_Images", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1e1e1e1-e1e1-e1e1-e1e1-e1e1e1e1e1e1"),
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("e2e2e2e2-e2e2-e2e2-e2e2-e2e2e2e2e2e2"),
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("e3e3e3e3-e3e3-e3e3-e3e3-e3e3e3e3e3e3"),
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000002")
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_RR", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RRId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccomId");

                    b.HasIndex("RRId");

                    b.ToTable("Accom_RR", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accommodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GgMapsQuery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Ll")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccomTypeId");

                    b.ToTable("Accommodations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            AccomTypeId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Address = "01 Main St, District 1, HCMC",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "contact@alpha.example",
                            GgMapsQuery = "Alpha+Hotel+HCMC",
                            IsDeleted = false,
                            Ll = "10.776,106.700",
                            Location = "Ho Chi Minh City",
                            Name = "Alpha Hotel",
                            Phone = "+84 123 456 789",
                            Rating = 8.6f,
                            Star = 4
                        },
                        new
                        {
                            Id = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            AccomTypeId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Address = "Beach Rd, Nha Trang",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hello@beta.example",
                            GgMapsQuery = "Beta+Resort+Nha+Trang",
                            IsDeleted = false,
                            Ll = "12.245,109.195",
                            Location = "Nha Trang",
                            Name = "Beta Resort",
                            Phone = "+84 987 654 321",
                            Rating = 9.1f,
                            Star = 5
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.BedType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BedTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Queen"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Twin"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.CancelPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CancelPolicies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1f1f1f1-f1f1-f1f1-f1f1-f1f1f1f1f1f1"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Flexible (24h)"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "wifi",
                            Name = "Free Wi-Fi"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "pool",
                            Name = "Pool"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "dumbbell",
                            Name = "Gym"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.GeneralInfo", b =>
                {
                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccommodationId");

                    b.Property<string>("AnotherFacility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvailableRooms")
                        .HasColumnType("int");

                    b.Property<bool?>("BreakfastAvailability")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("CheckIn")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("CheckOut")
                        .HasColumnType("time");

                    b.Property<string>("DistanceToDowntown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearbyPOI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<string>("PopularFacility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PopularInArea")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccomId");

                    b.ToTable("GeneralInfos", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000001"),
                            Alt = "Lobby",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1018/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000002"),
                            Alt = "Room",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1015/600/400"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.PaymentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentRecords", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Policy", b =>
                {
                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccommodationId");

                    b.Property<string>("Addtional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Breakfast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("CheckIn")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("CheckOut")
                        .HasColumnType("time");

                    b.Property<string>("Intruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequireDocs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smoking")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccomId");

                    b.ToTable("Policies", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.ReviewsAndRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewsAndRatings", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BedTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Breakfast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CancelPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid?>("RoomCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BedTypeId");

                    b.HasIndex("CancelPolicyId");

                    b.HasIndex("RoomCategoryId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000001"),
                            Available = true,
                            BedTypeId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Breakfast = true,
                            CancelPolicyId = new Guid("f1f1f1f1-f1f1-f1f1-f1f1-f1f1f1f1f1f1"),
                            CategoryId = new Guid("12121212-3434-5656-7878-909090909090"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "A-101",
                            NumberOfBeds = 1,
                            Rating = 8.5f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000002"),
                            Available = true,
                            BedTypeId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Breakfast = true,
                            CancelPolicyId = new Guid("f1f1f1f1-f1f1-f1f1-f1f1-f1f1f1f1f1f1"),
                            CategoryId = new Guid("23232323-4545-6767-8989-010101010101"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "B-201",
                            NumberOfBeds = 2,
                            Rating = 9.2f
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.RoomCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AccomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccommodationId")
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("BasicFacilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("BathAmenities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RoomFacilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccomId");

                    b.HasIndex("AccommodationId");

                    b.ToTable("RoomCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("12121212-3434-5656-7878-909090909090"),
                            About = "Cozy 20m2",
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Standard",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("23232323-4545-6767-8989-010101010101"),
                            About = "Spacious 32m2, balcony",
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Deluxe Sea View",
                            RoomFacilities = "[]"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room_Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RoomCategoryId", "FacilityId")
                        .IsUnique();

                    b.ToTable("Room_Facilities", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room_Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("RoomCategoryId", "ImageId")
                        .IsUnique();

                    b.ToTable("Room_Images", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Infrastructure.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_Facility", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("Accom_Facilities")
                        .HasForeignKey("AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.Facility", "Facility")
                        .WithMany("Accom_Facilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_Image", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("Accom_Images")
                        .HasForeignKey("AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.Image", "Image")
                        .WithMany("Accom_Images")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_RR", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("Accom_RRs")
                        .HasForeignKey("AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.ReviewsAndRating", "ReviewsAndRating")
                        .WithMany("Accom_RRs")
                        .HasForeignKey("RRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("ReviewsAndRating");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accommodation", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.AccomType", "AccomType")
                        .WithMany("Accommodations")
                        .HasForeignKey("AccomTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccomType");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.GeneralInfo", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithOne("GeneralInfo")
                        .HasForeignKey("TravelokaV2.Domain.Entities.GeneralInfo", "AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.PaymentRecord", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("TravelokaV2.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PaymentMethod");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Policy", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithOne("Policy")
                        .HasForeignKey("TravelokaV2.Domain.Entities.Policy", "AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.ReviewsAndRating", b =>
                {
                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.BedType", "BedType")
                        .WithMany()
                        .HasForeignKey("BedTypeId");

                    b.HasOne("TravelokaV2.Domain.Entities.CancelPolicy", "CancelPolicy")
                        .WithMany()
                        .HasForeignKey("CancelPolicyId");

                    b.HasOne("TravelokaV2.Domain.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomCategoryId");

                    b.Navigation("BedType");

                    b.Navigation("CancelPolicy");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.RoomCategory", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", null)
                        .WithMany("RoomCategories")
                        .HasForeignKey("AccomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationId");

                    b.Navigation("Accommodation");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room_Facility", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Facility", "Facility")
                        .WithMany("Room_Facilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Room_Facilities")
                        .HasForeignKey("RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room_Image", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Image", "Image")
                        .WithMany("Room_Images")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Room_Images")
                        .HasForeignKey("RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.AccomType", b =>
                {
                    b.Navigation("Accommodations");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accommodation", b =>
                {
                    b.Navigation("Accom_Facilities");

                    b.Navigation("Accom_Images");

                    b.Navigation("Accom_RRs");

                    b.Navigation("GeneralInfo");

                    b.Navigation("Policy");

                    b.Navigation("RoomCategories");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Facility", b =>
                {
                    b.Navigation("Accom_Facilities");

                    b.Navigation("Room_Facilities");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Image", b =>
                {
                    b.Navigation("Accom_Images");

                    b.Navigation("Room_Images");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.ReviewsAndRating", b =>
                {
                    b.Navigation("Accom_RRs");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.RoomCategory", b =>
                {
                    b.Navigation("Room_Facilities");

                    b.Navigation("Room_Images");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
