// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelokaV2.Infrastructure.Persistence;

#nullable disable

namespace TravelokaV2.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251014112613_AddPriceToRoom")]
    partial class AddPriceToRoom
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.AccomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccomTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Khách sạn"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Khu nghỉ dưỡng"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Căn hộ"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Biệt thự"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Hostel"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Nhà khách"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Homestay"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Nhà nghỉ"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Khách sạn con nhộng"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Bungalow"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Farmstay"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Khu cắm trại"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Nhà nghỉ Lodge"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Ryokan"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Riad"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("AccomId", "FacilityId")
                        .IsUnique();

                    b.ToTable("Accom_Facilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1b1b1b1-b1b1-b1b1-b1b1-b1b1b1b1b1b1"),
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa01")
                        },
                        new
                        {
                            Id = new Guid("b2b2b2b2-b2b2-b2b2-b2b2-b2b2b2b2b2b2"),
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbb02")
                        },
                        new
                        {
                            Id = new Guid("b3b3b3b3-b3b3-b3b3-b3b3-b3b3b3b3b3b3"),
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa01")
                        },
                        new
                        {
                            Id = new Guid("b4b4b4b4-b4b4-b4b4-b4b4-b4b4b4b4b4b4"),
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccc03")
                        },
                        new
                        {
                            Id = new Guid("b5b5b5b5-b5b5-b5b5-b5b5-b5b5b5b5b5b5"),
                            AccomId = new Guid("cccc1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa05")
                        },
                        new
                        {
                            Id = new Guid("b6b6b6b6-b6b6-b6b6-b6b6-b6b6b6b6b6b6"),
                            AccomId = new Guid("dddd1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa04")
                        },
                        new
                        {
                            Id = new Guid("b7b7b7b7-b7b7-b7b7-b7b7-b7b7b7b7b7b7"),
                            AccomId = new Guid("eeee1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa09")
                        },
                        new
                        {
                            Id = new Guid("b8b8b8b8-b8b8-b8b8-b8b8-b8b8b8b8b8b8"),
                            AccomId = new Guid("ffff1111-2222-3333-4444-555566667777"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa08")
                        },
                        new
                        {
                            Id = new Guid("b9b9b9b9-b9b9-b9b9-b9b9-b9b9b9b9b9b9"),
                            AccomId = new Guid("1111aaaa-2222-bbbb-3333-444455556666"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa10")
                        },
                        new
                        {
                            Id = new Guid("babababa-baba-baba-baba-babababababa"),
                            AccomId = new Guid("2222bbbb-3333-cccc-4444-555566667777"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa06")
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("AccomId", "ImageId")
                        .IsUnique();

                    b.ToTable("Accom_Images", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1e1e1e1-e1e1-e1e1-e1e1-e1e1e1e1e1e1"),
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("e2e2e2e2-e2e2-e2e2-e2e2-e2e2e2e2e2e2"),
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("e3e3e3e3-e3e3-e3e3-e3e3-e3e3e3e3e3e3"),
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("e4e4e4e4-e4e4-e4e4-e4e4-e4e4e4e4e4e4"),
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("e5e5e5e5-e5e5-e5e5-e5e5-e5e5e5e5e5e5"),
                            AccomId = new Guid("cccc1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("e6e6e6e6-e6e6-e6e6-e6e6-e6e6e6e6e6e6"),
                            AccomId = new Guid("dddd1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("e7e7e7e7-e7e7-e7e7-e7e7-e7e7e7e7e7e7"),
                            AccomId = new Guid("eeee1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("e8e8e8e8-e8e8-e8e8-e8e8-e8e8e8e8e8e8"),
                            AccomId = new Guid("ffff1111-2222-3333-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("e9e9e9e9-e9e9-e9e9-e9e9-e9e9e9e9e9e9"),
                            AccomId = new Guid("1111aaaa-2222-bbbb-3333-444455556666"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("efefefef-efef-efef-efef-efefefefefef"),
                            AccomId = new Guid("2222bbbb-3333-cccc-4444-555566667777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_RR", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RRId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccomId");

                    b.HasIndex("RRId");

                    b.ToTable("Accom_RR", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accommodation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GgMapsQuery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Ll")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccomTypeId");

                    b.ToTable("Accommodations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            AccomTypeId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Address = "01 Nguyễn Huệ, Q.1, TP. Hồ Chí Minh",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "contact@alpha.example",
                            GgMapsQuery = "Khach+san+Alpha+TP+Ho+Chi+Minh",
                            IsDeleted = false,
                            Ll = "10.776,106.700",
                            Location = "TP. Hồ Chí Minh",
                            Name = "Khách sạn Alpha",
                            Phone = "+84 123 456 789",
                            Rating = 8.6f,
                            Star = 4
                        },
                        new
                        {
                            Id = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            AccomTypeId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Address = "Đường ven biển, Nha Trang",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hello@beta.example",
                            GgMapsQuery = "Khu+nghi+duong+Beta+Nha+Trang",
                            IsDeleted = false,
                            Ll = "12.245,109.195",
                            Location = "Nha Trang",
                            Name = "Khu nghỉ dưỡng Beta",
                            Phone = "+84 987 654 321",
                            Rating = 9.1f,
                            Star = 5
                        },
                        new
                        {
                            Id = new Guid("cccc1111-2222-3333-4444-555566667777"),
                            AccomTypeId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Address = "Nguyễn Văn Linh, Đà Nẵng",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stay@gamma.example",
                            GgMapsQuery = "Can+ho+Gamma+Da+Nang",
                            IsDeleted = false,
                            Ll = "16.047,108.206",
                            Location = "Đà Nẵng",
                            Name = "Căn hộ Gamma",
                            Phone = "+84 909 111 222",
                            Rating = 8.2f,
                            Star = 4
                        },
                        new
                        {
                            Id = new Guid("dddd1111-2222-3333-4444-555566667777"),
                            AccomTypeId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Address = "Bãi biển An Bàng, Hội An",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "booking@delta.example",
                            GgMapsQuery = "Biet+thu+Delta+Hoi+An",
                            IsDeleted = false,
                            Ll = "15.879,108.335",
                            Location = "Hội An",
                            Name = "Biệt thự Delta",
                            Phone = "+84 909 333 444",
                            Rating = 9f,
                            Star = 5
                        },
                        new
                        {
                            Id = new Guid("eeee1111-2222-3333-4444-555566667777"),
                            AccomTypeId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Address = "Phố Cổ, Hà Nội",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hi@epsilon.example",
                            GgMapsQuery = "Hostel+Epsilon+Ha+Noi",
                            IsDeleted = false,
                            Ll = "21.028,105.854",
                            Location = "Hà Nội",
                            Name = "Hostel Epsilon",
                            Phone = "+84 909 555 666",
                            Rating = 8f,
                            Star = 3
                        },
                        new
                        {
                            Id = new Guid("ffff1111-2222-3333-4444-555566667777"),
                            AccomTypeId = new Guid("77777777-7777-7777-7777-777777777777"),
                            Address = "Dương Đông, Phú Quốc",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "hello@zeta.example",
                            GgMapsQuery = "Homestay+Zeta+Phu+Quoc",
                            IsDeleted = false,
                            Ll = "10.284,103.984",
                            Location = "Phú Quốc",
                            Name = "Homestay Zeta",
                            Phone = "+84 909 777 888",
                            Rating = 8.7f,
                            Star = 4
                        },
                        new
                        {
                            Id = new Guid("1111aaaa-2222-bbbb-3333-444455556666"),
                            AccomTypeId = new Guid("99999999-9999-9999-9999-999999999999"),
                            Address = "Q.3, TP. Hồ Chí Minh",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stay@eta.example",
                            GgMapsQuery = "Capsule+Eta+TP+Ho+Chi+Minh",
                            IsDeleted = false,
                            Ll = "10.781,106.696",
                            Location = "TP. Hồ Chí Minh",
                            Name = "Capsule Eta",
                            Phone = "+84 909 000 111",
                            Rating = 7.9f,
                            Star = 3
                        },
                        new
                        {
                            Id = new Guid("2222bbbb-3333-cccc-4444-555566667777"),
                            AccomTypeId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Address = "Thị trấn Sa Pa, Lào Cai",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "stay@theta.example",
                            GgMapsQuery = "Lodge+Theta+Sa+Pa",
                            IsDeleted = false,
                            Ll = "22.335,103.843",
                            Location = "Sa Pa",
                            Name = "Lodge Theta",
                            Phone = "+84 909 222 333",
                            Rating = 8.3f,
                            Star = 4
                        },
                        new
                        {
                            Id = new Guid("3333cccc-4444-dddd-5555-666677778888"),
                            AccomTypeId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Address = "Trung tâm Đà Lạt, Lâm Đồng",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "info@iota.example",
                            GgMapsQuery = "Ryokan+Iota+Da+Lat",
                            IsDeleted = false,
                            Ll = "11.940,108.458",
                            Location = "Đà Lạt",
                            Name = "Ryokan Iota",
                            Phone = "+84 909 444 555",
                            Rating = 9.2f,
                            Star = 5
                        },
                        new
                        {
                            Id = new Guid("4444dddd-5555-eeee-6666-777788889999"),
                            AccomTypeId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Address = "TP. Buôn Ma Thuột, Đắk Lắk",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "farm@kappa.example",
                            GgMapsQuery = "Farmstay+Kappa+Dak+Lak",
                            IsDeleted = false,
                            Ll = "12.667,108.037",
                            Location = "Đắk Lắk",
                            Name = "Farmstay Kappa",
                            Phone = "+84 909 666 777",
                            Rating = 8.4f,
                            Star = 4
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.BedType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BedTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddd04"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Giường Queen"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeee05"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Giường Twin"
                        },
                        new
                        {
                            Id = new Guid("bead0000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Giường đơn"
                        },
                        new
                        {
                            Id = new Guid("bead0000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Giường đôi"
                        },
                        new
                        {
                            Id = new Guid("bead0000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Giường King"
                        },
                        new
                        {
                            Id = new Guid("bead0000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Giường Super King"
                        },
                        new
                        {
                            Id = new Guid("bead0000-0000-0000-0000-000000000005"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Giường tầng"
                        },
                        new
                        {
                            Id = new Guid("bead0000-0000-0000-0000-000000000006"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Giường sofa"
                        },
                        new
                        {
                            Id = new Guid("bead0000-0000-0000-0000-000000000007"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Đệm futon"
                        },
                        new
                        {
                            Id = new Guid("bead0000-0000-0000-0000-000000000008"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Đệm tatami"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.CancelPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CancelPolicies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1f1f1f1-f1f1-f1f1-f1f1-f1f1f1f1f1f1"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Linh hoạt (24h)"
                        },
                        new
                        {
                            Id = new Guid("cafe0000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Linh hoạt (48h)"
                        },
                        new
                        {
                            Id = new Guid("cafe0000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Linh hoạt (72h)"
                        },
                        new
                        {
                            Id = new Guid("cafe0000-0000-0000-0000-000000000003"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Linh hoạt (7 ngày)"
                        },
                        new
                        {
                            Id = new Guid("cafe0000-0000-0000-0000-000000000004"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Linh hoạt (14 ngày)"
                        },
                        new
                        {
                            Id = new Guid("cafe0000-0000-0000-0000-000000000005"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Không hoàn huỷ"
                        },
                        new
                        {
                            Id = new Guid("cafe0000-0000-0000-0000-000000000006"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Vắng mặt tính phí 1 đêm"
                        },
                        new
                        {
                            Id = new Guid("cafe0000-0000-0000-0000-000000000007"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Miễn phí tới 18:00"
                        },
                        new
                        {
                            Id = new Guid("cafe0000-0000-0000-0000-000000000008"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Bán linh hoạt"
                        },
                        new
                        {
                            Id = new Guid("cafe0000-0000-0000-0000-000000000009"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Type = "Siêu linh hoạt"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa01"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "wifi",
                            Name = "Wi-Fi miễn phí"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbb02"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "pool",
                            Name = "Hồ bơi"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccc03"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "dumbbell",
                            Name = "Phòng gym"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa04"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "spa",
                            Name = "Spa"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa05"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "parking",
                            Name = "Bãi đỗ xe"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa06"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "restaurant",
                            Name = "Nhà hàng"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa07"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "glass",
                            Name = "Bar"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa08"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "bus",
                            Name = "Đưa đón sân bay"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa09"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "bell",
                            Name = "Lễ tân 24/7"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa10"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Icon = "washing",
                            Name = "Giặt là"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.GeneralInfo", b =>
                {
                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccommodationId");

                    b.Property<string>("AnotherFacility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvailableRooms")
                        .HasColumnType("int");

                    b.Property<bool?>("BreakfastAvailability")
                        .HasColumnType("bit");

                    b.Property<TimeOnly?>("CheckIn")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("CheckOut")
                        .HasColumnType("time");

                    b.Property<string>("DistanceToDowntown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NearbyPOI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<string>("PopularFacility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PopularInArea")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccomId");

                    b.ToTable("GeneralInfos", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000001"),
                            Alt = "Sảnh",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1018/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000002"),
                            Alt = "Phòng ngủ",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1015/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000003"),
                            Alt = "Phòng tiêu chuẩn",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1025/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000004"),
                            Alt = "Deluxe hướng biển",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1039/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000005"),
                            Alt = "Phòng khách suite",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1040/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000006"),
                            Alt = "Phòng tắm",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1041/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000007"),
                            Alt = "Bữa sáng",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1042/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000008"),
                            Alt = "Hồ bơi",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1043/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000009"),
                            Alt = "Khu gym",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1044/600/400"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000010"),
                            Alt = "Khu spa",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Url = "https://picsum.photos/id/1045/600/400"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11112222-3333-4444-5555-666677778888"),
                            Name = "Tiền mặt"
                        },
                        new
                        {
                            Id = new Guid("22223333-4444-5555-6666-777788889999"),
                            Name = "Thẻ tín dụng (Visa/Master)"
                        },
                        new
                        {
                            Id = new Guid("33334444-5555-6666-7777-88889999aaaa"),
                            Name = "Thẻ ghi nợ"
                        },
                        new
                        {
                            Id = new Guid("44445555-6666-7777-8888-9999aaaabbbb"),
                            Name = "MoMo"
                        },
                        new
                        {
                            Id = new Guid("55556666-7777-8888-9999-aaaabbbbcccc"),
                            Name = "ZaloPay"
                        },
                        new
                        {
                            Id = new Guid("66667777-8888-9999-aaaa-bbbbccccdddd"),
                            Name = "Chuyển khoản ngân hàng"
                        },
                        new
                        {
                            Id = new Guid("77778888-9999-aaaa-bbbb-ccccddddeeee"),
                            Name = "Apple Pay"
                        },
                        new
                        {
                            Id = new Guid("88889999-aaaa-bbbb-cccc-ddddeeeeffff"),
                            Name = "Google Pay"
                        },
                        new
                        {
                            Id = new Guid("9999aaaa-bbbb-cccc-dddd-eeeeffff0000"),
                            Name = "VNPAY"
                        },
                        new
                        {
                            Id = new Guid("aaaa9999-bbbb-cccc-dddd-eeeeffff1111"),
                            Name = "PayPal"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.PaymentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentRecords", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Policy", b =>
                {
                    b.Property<Guid>("AccomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("AccommodationId");

                    b.Property<string>("Addtional")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Breakfast")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("CheckIn")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("CheckOut")
                        .HasColumnType("time");

                    b.Property<string>("Intruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pets")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequireDocs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Smoking")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccomId");

                    b.ToTable("Policies", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.ReviewsAndRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewsAndRatings", (string)null);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Available")
                        .HasColumnType("bit");

                    b.Property<Guid?>("BedTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Breakfast")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CancelPolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BedTypeId");

                    b.HasIndex("CancelPolicyId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Rooms", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000001"),
                            Available = true,
                            BedTypeId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddd04"),
                            Breakfast = true,
                            CancelPolicyId = new Guid("f1f1f1f1-f1f1-f1f1-f1f1-f1f1f1f1f1f1"),
                            CategoryId = new Guid("12121212-3434-5656-7878-909090909090"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "A-101",
                            NumberOfBeds = 1,
                            Price = 850000m,
                            Rating = 8.5f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000002"),
                            Available = true,
                            BedTypeId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeee05"),
                            Breakfast = true,
                            CancelPolicyId = new Guid("f1f1f1f1-f1f1-f1f1-f1f1-f1f1f1f1f1f1"),
                            CategoryId = new Guid("23232323-4545-6767-8989-010101010101"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "B-201",
                            NumberOfBeds = 2,
                            Price = 1250000m,
                            Rating = 9.2f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000003"),
                            Available = true,
                            BedTypeId = new Guid("bead0000-0000-0000-0000-000000000001"),
                            Breakfast = false,
                            CancelPolicyId = new Guid("cafe0000-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("12121212-3434-5656-7878-909090909090"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "A-102",
                            NumberOfBeds = 1,
                            Price = 780000m,
                            Rating = 8.1f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000004"),
                            Available = true,
                            BedTypeId = new Guid("bead0000-0000-0000-0000-000000000002"),
                            Breakfast = true,
                            CancelPolicyId = new Guid("cafe0000-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("32323232-5454-7676-9898-020202020202"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "A-103",
                            NumberOfBeds = 1,
                            Price = 990000m,
                            Rating = 8.3f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000005"),
                            Available = true,
                            BedTypeId = new Guid("bead0000-0000-0000-0000-000000000003"),
                            Breakfast = true,
                            CancelPolicyId = new Guid("cafe0000-0000-0000-0000-000000000003"),
                            CategoryId = new Guid("43434343-6565-8787-0909-030303030303"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "A-104",
                            NumberOfBeds = 2,
                            Price = 1650000m,
                            Rating = 8.9f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000006"),
                            Available = true,
                            BedTypeId = new Guid("bead0000-0000-0000-0000-000000000004"),
                            Breakfast = false,
                            CancelPolicyId = new Guid("cafe0000-0000-0000-0000-000000000004"),
                            CategoryId = new Guid("54545454-7676-9898-1010-040404040404"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "B-202",
                            NumberOfBeds = 1,
                            Price = 880000m,
                            Rating = 8.7f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000007"),
                            Available = true,
                            BedTypeId = new Guid("bead0000-0000-0000-0000-000000000005"),
                            Breakfast = true,
                            CancelPolicyId = new Guid("cafe0000-0000-0000-0000-000000000005"),
                            CategoryId = new Guid("65656565-8787-0909-1111-050505050505"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "B-203",
                            NumberOfBeds = 2,
                            Price = 1120000m,
                            Rating = 8.8f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000008"),
                            Available = true,
                            BedTypeId = new Guid("bead0000-0000-0000-0000-000000000006"),
                            Breakfast = false,
                            CancelPolicyId = new Guid("cafe0000-0000-0000-0000-000000000006"),
                            CategoryId = new Guid("76767676-9898-1010-1212-060606060606"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "G-301",
                            NumberOfBeds = 1,
                            Price = 720000m,
                            Rating = 8f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000009"),
                            Available = true,
                            BedTypeId = new Guid("bead0000-0000-0000-0000-000000000007"),
                            Breakfast = true,
                            CancelPolicyId = new Guid("cafe0000-0000-0000-0000-000000000007"),
                            CategoryId = new Guid("87878787-0909-1111-1313-070707070707"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "D-401",
                            NumberOfBeds = 1,
                            Price = 1320000m,
                            Rating = 8.6f
                        },
                        new
                        {
                            Id = new Guid("77777777-0000-0000-0000-000000000010"),
                            Available = true,
                            BedTypeId = new Guid("bead0000-0000-0000-0000-000000000008"),
                            Breakfast = true,
                            CancelPolicyId = new Guid("cafe0000-0000-0000-0000-000000000008"),
                            CategoryId = new Guid("98989898-1010-1212-1414-080808080808"),
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "E-501",
                            NumberOfBeds = 2,
                            Price = 980000m,
                            Rating = 8.2f
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.RoomCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AccomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccommodationId")
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("BasicFacilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("BathAmenities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("RoomFacilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccomId");

                    b.HasIndex("AccommodationId");

                    b.ToTable("RoomCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("12121212-3434-5656-7878-909090909090"),
                            About = "Phòng 20m² ấm cúng",
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Tiêu chuẩn",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("23232323-4545-6767-8989-010101010101"),
                            About = "Phòng 32m², có ban công",
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Deluxe Hướng Biển",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("32323232-5454-7676-9898-020202020202"),
                            About = "22m², có cửa sổ",
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Superior",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("43434343-6565-8787-0909-030303030303"),
                            About = "45m², có góc tiếp khách",
                            AccomId = new Guid("aaaa1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Suite",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("54545454-7676-9898-1010-040404040404"),
                            About = "24m²",
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Tiêu chuẩn",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("65656565-8787-0909-1111-050505050505"),
                            About = "35m², 2 giường",
                            AccomId = new Guid("bbbb1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Gia đình",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("76767676-9898-1010-1212-060606060606"),
                            About = "28m², bếp nhỏ",
                            AccomId = new Guid("cccc1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Studio",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("87878787-0909-1111-1313-070707070707"),
                            About = "40m², nhìn vườn",
                            AccomId = new Guid("dddd1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Grand Deluxe",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("98989898-1010-1212-1414-080808080808"),
                            About = "Giường tầng, phòng chung",
                            AccomId = new Guid("eeee1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Ký túc xá",
                            RoomFacilities = "[]"
                        },
                        new
                        {
                            Id = new Guid("09090909-1111-1313-1515-090909090909"),
                            About = "29m², có ban công",
                            AccomId = new Guid("ffff1111-2222-3333-4444-555566667777"),
                            BasicFacilities = "[]",
                            BathAmenities = "[]",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Name = "Premier",
                            RoomFacilities = "[]"
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room_Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RoomCategoryId", "FacilityId")
                        .IsUnique();

                    b.ToTable("Room_Facilities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1f1f1f1-1111-1111-1111-111111111111"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa01"),
                            RoomCategoryId = new Guid("12121212-3434-5656-7878-909090909090")
                        },
                        new
                        {
                            Id = new Guid("f2f2f2f2-2222-2222-2222-222222222222"),
                            FacilityId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbb02"),
                            RoomCategoryId = new Guid("23232323-4545-6767-8989-010101010101")
                        },
                        new
                        {
                            Id = new Guid("f3f3f3f3-3333-3333-3333-333333333333"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa09"),
                            RoomCategoryId = new Guid("32323232-5454-7676-9898-020202020202")
                        },
                        new
                        {
                            Id = new Guid("f4f4f4f4-4444-4444-4444-444444444444"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa04"),
                            RoomCategoryId = new Guid("43434343-6565-8787-0909-030303030303")
                        },
                        new
                        {
                            Id = new Guid("f5f5f5f5-5555-5555-5555-555555555555"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa05"),
                            RoomCategoryId = new Guid("54545454-7676-9898-1010-040404040404")
                        },
                        new
                        {
                            Id = new Guid("f6f6f6f6-6666-6666-6666-666666666666"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa10"),
                            RoomCategoryId = new Guid("65656565-8787-0909-1111-050505050505")
                        },
                        new
                        {
                            Id = new Guid("f7f7f7f7-7777-7777-7777-777777777777"),
                            FacilityId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccc03"),
                            RoomCategoryId = new Guid("76767676-9898-1010-1212-060606060606")
                        },
                        new
                        {
                            Id = new Guid("f8f8f8f8-8888-8888-8888-888888888888"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa06"),
                            RoomCategoryId = new Guid("87878787-0909-1111-1313-070707070707")
                        },
                        new
                        {
                            Id = new Guid("f9f9f9f9-9999-9999-9999-999999999999"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa01"),
                            RoomCategoryId = new Guid("98989898-1010-1212-1414-080808080808")
                        },
                        new
                        {
                            Id = new Guid("fafafafa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            FacilityId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaa07"),
                            RoomCategoryId = new Guid("09090909-1111-1313-1515-090909090909")
                        });
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room_Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("RoomCategoryId", "ImageId")
                        .IsUnique();

                    b.ToTable("Room_Images", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1a1a1a1-1111-1111-1111-111111111111"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000003"),
                            RoomCategoryId = new Guid("12121212-3434-5656-7878-909090909090")
                        },
                        new
                        {
                            Id = new Guid("a2a2a2a2-2222-2222-2222-222222222222"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000004"),
                            RoomCategoryId = new Guid("23232323-4545-6767-8989-010101010101")
                        },
                        new
                        {
                            Id = new Guid("a3a3a3a3-3333-3333-3333-333333333333"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000005"),
                            RoomCategoryId = new Guid("32323232-5454-7676-9898-020202020202")
                        },
                        new
                        {
                            Id = new Guid("a4a4a4a4-4444-4444-4444-444444444444"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000006"),
                            RoomCategoryId = new Guid("43434343-6565-8787-0909-030303030303")
                        },
                        new
                        {
                            Id = new Guid("a5a5a5a5-5555-5555-5555-555555555555"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000007"),
                            RoomCategoryId = new Guid("54545454-7676-9898-1010-040404040404")
                        },
                        new
                        {
                            Id = new Guid("a6a6a6a6-6666-6666-6666-666666666666"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000008"),
                            RoomCategoryId = new Guid("65656565-8787-0909-1111-050505050505")
                        },
                        new
                        {
                            Id = new Guid("a7a7a7a7-7777-7777-7777-777777777777"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000009"),
                            RoomCategoryId = new Guid("76767676-9898-1010-1212-060606060606")
                        },
                        new
                        {
                            Id = new Guid("a8a8a8a8-8888-8888-8888-888888888888"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000010"),
                            RoomCategoryId = new Guid("87878787-0909-1111-1313-070707070707")
                        },
                        new
                        {
                            Id = new Guid("a9a9a9a9-9999-9999-9999-999999999999"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000002"),
                            RoomCategoryId = new Guid("98989898-1010-1212-1414-080808080808")
                        },
                        new
                        {
                            Id = new Guid("abababab-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ImageId = new Guid("99999999-0000-0000-0000-000000000001"),
                            RoomCategoryId = new Guid("09090909-1111-1313-1515-090909090909")
                        });
                });

            modelBuilder.Entity("TravelokaV2.Infrastructure.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifyAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_Facility", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("Accom_Facilities")
                        .HasForeignKey("AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.Facility", "Facility")
                        .WithMany("Accom_Facilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_Image", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("Accom_Images")
                        .HasForeignKey("AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.Image", "Image")
                        .WithMany("Accom_Images")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accom_RR", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany("Accom_RRs")
                        .HasForeignKey("AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.ReviewsAndRating", "ReviewsAndRating")
                        .WithMany("Accom_RRs")
                        .HasForeignKey("RRId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("ReviewsAndRating");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accommodation", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.AccomType", "AccomType")
                        .WithMany("Accommodations")
                        .HasForeignKey("AccomTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccomType");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.GeneralInfo", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithOne("GeneralInfo")
                        .HasForeignKey("TravelokaV2.Domain.Entities.GeneralInfo", "AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.PaymentRecord", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("TravelokaV2.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PaymentMethod");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Policy", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithOne("Policy")
                        .HasForeignKey("TravelokaV2.Domain.Entities.Policy", "AccomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.ReviewsAndRating", b =>
                {
                    b.HasOne("TravelokaV2.Infrastructure.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.BedType", "BedType")
                        .WithMany()
                        .HasForeignKey("BedTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TravelokaV2.Domain.Entities.CancelPolicy", "CancelPolicy")
                        .WithMany()
                        .HasForeignKey("CancelPolicyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TravelokaV2.Domain.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Rooms")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BedType");

                    b.Navigation("CancelPolicy");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.RoomCategory", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", null)
                        .WithMany("RoomCategories")
                        .HasForeignKey("AccomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelokaV2.Domain.Entities.Accommodation", "Accommodation")
                        .WithMany()
                        .HasForeignKey("AccommodationId");

                    b.Navigation("Accommodation");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room_Facility", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Facility", "Facility")
                        .WithMany("Room_Facilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Room_Facilities")
                        .HasForeignKey("RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Room_Image", b =>
                {
                    b.HasOne("TravelokaV2.Domain.Entities.Image", "Image")
                        .WithMany("Room_Images")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelokaV2.Domain.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Room_Images")
                        .HasForeignKey("RoomCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.AccomType", b =>
                {
                    b.Navigation("Accommodations");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Accommodation", b =>
                {
                    b.Navigation("Accom_Facilities");

                    b.Navigation("Accom_Images");

                    b.Navigation("Accom_RRs");

                    b.Navigation("GeneralInfo");

                    b.Navigation("Policy");

                    b.Navigation("RoomCategories");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Facility", b =>
                {
                    b.Navigation("Accom_Facilities");

                    b.Navigation("Room_Facilities");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.Image", b =>
                {
                    b.Navigation("Accom_Images");

                    b.Navigation("Room_Images");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.ReviewsAndRating", b =>
                {
                    b.Navigation("Accom_RRs");
                });

            modelBuilder.Entity("TravelokaV2.Domain.Entities.RoomCategory", b =>
                {
                    b.Navigation("Room_Facilities");

                    b.Navigation("Room_Images");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
